0) Create a working branch
git checkout -b feature/realty-basepath

1) Tailwind v4 / PostCSS sanity

postcss.config.js

// postcss.config.js
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
};


app/globals.css

/* app/globals.css */
@import "tailwindcss";

html, body {
  min-height: 100%;
}


(If globals.css already imports Tailwind, keep a single import.)

2) Path aliases & shadcn/ui

tsconfig.json (only the relevant bits)

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["*"],
      "@/components/*": ["components/*"]
    }
  }
}


If you‚Äôre using shadcn/ui, confirm imports like:

import { Button } from "@/components/ui/button";


If those paths 404, either:

adjust to the actual folder (e.g., @/components/Button), or

add lightweight stand-ins in components/ui/ (Button/Input) to unblock.

3) Site config centralization

Create lib/siteConfig.ts (or update it if it exists):

// lib/siteConfig.ts
export const SITE_URL =
  process.env.NEXT_PUBLIC_SITE_URL || "https://realvibeai-realty.vercel.app";

export const FACEBOOK_URL =
  process.env.NEXT_PUBLIC_FACEBOOK_URL ||
  "https://www.facebook.com/share/1G11RPicxJ/?mibextid=wwXIfr";

export const LINKEDIN_URL =
  process.env.NEXT_PUBLIC_LINKEDIN_URL ||
  "https://www.linkedin.com/company/realvibe-ai-realty/";


Use these constants everywhere instead of hardcoding.

4) Env handling

Create .env.example at the repo root:

# Public
NEXT_PUBLIC_SITE_URL=https://www.realvibeai.com
NEXT_PUBLIC_FACEBOOK_URL=https://www.facebook.com/share/1G11RPicxJ/?mibextid=wwXIfr
NEXT_PUBLIC_LINKEDIN_URL=https://www.linkedin.com/company/realvibe-ai-realty/

# Private (stubs ‚Äì do not commit real values)
HUBSPOT_PORTAL_ID=
HUBSPOT_FORM_ID_CONTACT=
HUBSPOT_API_KEY=
COLLOV_API_KEY=
INSTANTDECO_API_KEY=
BLOB_READ_WRITE_TOKEN=


Do not commit a real .env. Commit only .env.example.

5) Base path / Next config (if you‚Äôre using /realty/* routes)

If your site should live under /realty, add/confirm:

next.config.ts

// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  basePath: "/realty",
  experimental: { typedRoutes: true }
};

export default nextConfig;


After setting basePath, internal Links become href="/realty/..." automatically via next/link.

If you already route at root, skip basePath and keep /realty/... as actual folders.

6) Create missing pages (placeholders OK)

If any of these don‚Äôt exist, add minimal app-router pages:

app/
  page.tsx
  solutions/page.tsx
  contact/page.tsx
  pricing/page.tsx
  faq/page.tsx
  privacy/page.tsx
  staging/page.tsx
  about/page.tsx


Example placeholder:

// app/pricing/page.tsx
export default function PricingPage() {
  return (<main className="container mx-auto py-10">
    <h1 className="text-3xl font-bold">Pricing</h1>
    <p>Pricing details coming soon.</p>
  </main>);
}

7) Build + route verification

Install fresh, then build:

npm ci
npm run build


During the build, Next.js prints a Routes table. Copy it. You should see (examples):

/realty
/realty/solutions
/realty/contact
/realty/pricing
/realty/faq
/realty/privacy
/realty/staging
/realty/about


(If you didn‚Äôt set basePath, routes will show without /realty‚Äîthat‚Äôs fine; just be consistent.)

8) Commit the configuration work
git add .
git commit -m "chore(audit): Tailwind v4 config, PostCSS, path aliases, siteConfig, env example, basePath/routes, placeholder pages"
git push origin feature/realty-basepath


Open a PR: feature/realty-basepath ‚Üí main.

9) (Optional) API stubs

If you reference upcoming endpoints, stub them to avoid build errors:

app/api/contact/route.ts
app/api/staging/route.ts

// example stub
import { NextResponse } from "next/server";
export async function POST() { return NextResponse.json({ ok: true }); }

10) Structured report (paste this in the PR description)
## Executive Summary
Updated Next/Tailwind config, path aliases, site config, env example, and ensured pages exist. Build passes; routes verified.

## Detected Stack & Config
- Next.js: App Router
- basePath: /realty (enabled|disabled)  ‚Üê pick one
- Redirects: (list if any)

## Pages
- /realty           ‚úÖ
- /realty/solutions ‚úÖ
- /realty/contact   ‚úÖ
- /realty/pricing   ‚úÖ
- /realty/faq       ‚úÖ
- /realty/privacy   ‚úÖ
- /realty/staging   ‚úÖ
- /realty/about     ‚úÖ
(Placeholders added where missing.)

## APIs
- Present: (list) 
- Stubs added: app/api/contact/route.ts, app/api/staging/route.ts

## Tailwind/PostCSS
- postcss.config.js uses @tailwindcss/postcss + autoprefixer ‚úÖ
- app/globals.css imports "tailwindcss" ‚úÖ

## Env & SiteConfig
- .env.example added with public URLs + private stubs ‚úÖ
- lib/siteConfig.ts centralizes SITE_URL, FACEBOOK_URL, LINKEDIN_URL ‚úÖ

## Build Output
- `npm ci && npm run build` ‚Üí Success ‚úÖ
- Routes table: (paste from build output)

## Next Actions (Go-Live)
- Add real values in Vercel env for: NEXT_PUBLIC_* + any keys
- Connect Vercel to GitHub (Preview on PRs, Production on main)
- Implement Contact form and provider keys post-launch
- Add schema.org + FAQ content (issue open)
- Performance pass (images/fonts/CWV)
- Validate a11y with Lighthouse
- Launch üöÄ

After the PR

If Vercel is linked to the repo, the PR will spin up a Preview deployment‚Äîcheck titles/meta/H1/ARIA there.

When ready, merge (protected main recommended).

If anything above doesn‚Äôt line up with what you see in your repo structure (e.g., you‚Äôre using /src/app or pages/ router), tell me which layout you have and I‚Äôll adjust the exact paths.

You said:

Create a working branch